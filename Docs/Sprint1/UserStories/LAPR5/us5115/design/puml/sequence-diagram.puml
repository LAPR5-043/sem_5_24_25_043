@startuml
title Sequence Diagram Title
skinparam classAttributeIconSize 0

skinparam class {
    LifeLineBorderColor DodgerBlue
    LifeLineBackgroundColor APPLICATION
    BackgroundColor LemonChiffon
    ArrowColor Brown
    BorderColor SaddleBrown
}

skinparam packageStyle rectangle

skinparam card {
    LifeLineBorderColor DodgerBlue
    LifeLineBackgroundColor APPLICATION
    BackgroundColor LemonChiffon
    ArrowColor Brown
    BorderColor SaddleBrown
}

actor Admin
participant "Route" as UI
participant "StaffController" as Controller
participant "StaffService" as userS
participant "StaffRepository" as userR

participant "StaffDTO" as userDTO
database "DataBase" as db

activate Admin
Admin -> UI: HttpGet("filtered")
activate UI
UI -> Controller: GetStaffsFiltered( firstName,  lastName,\n email, specialization, sortBy)
activate Controller
Controller -> userS : getStaffsFilteredAsync(firstName, lastName,\n email, specialization, sortBy)
activate userS
userS -> userR : GetAllAsync()
activate userR 
userR -> db : getAll()
activate db
db --> userR: staffs
deactivate db
userR --> userS: staffs
deactivate userR
userS -> userS : applies all  filters
loop for each staff, convert in dto 

userS -> userDTO** : new StaffDto(staff)
activate userDTO
userDTO --> userS : dto
deactivate userDTO
userS -> userS : list.Add(dto)
end

userS --> Controller : staffDtoList
deactivate userS 
Controller --> UI : staffDtoList
deactivate Controller 
UI --> Admin : staffDtoList
deactivate UI 
deactivate Admin
















@enduml