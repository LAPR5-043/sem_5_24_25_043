@startuml
title Sequence Diagram Title
skinparam classAttributeIconSize 0

skinparam class {
    LifeLineBorderColor DodgerBlue
    LifeLineBackgroundColor APPLICATION
    BackgroundColor LemonChiffon
    ArrowColor Brown
    BorderColor SaddleBrown
}

skinparam packageStyle rectangle

skinparam card {
    LifeLineBorderColor DodgerBlue
    LifeLineBackgroundColor APPLICATION
    BackgroundColor LemonChiffon
    ArrowColor Brown
    BorderColor SaddleBrown
}

actor Doctor
participant "EditOperationRequestUI" as UI
participant "EditOperationRequestController" as Controller
participant "ManageOperationRequestService" as staffS
participant "AuthService" as auth
participant "Repositories" as Repositories
participant "OperationRequestRepository" as operationRR
participant "StaffRepository" as staffR
participant "OperationRequest" as operationR
participant "Priority" as priority
participant "Deadline" as deadline
participant "User" as user
participant "Staff" as staff



activate Doctor
Doctor -> UI: Request to edit an operation\n request choosen in the US 5.1.19
activate UI
UI -> Controller: canEditOperationRequest(operationRequestId)
activate Controller
Controller -> auth: ensureAuthenticatedUserHasAnyOf(role)
activate auth
auth --> Controller:  true
deactivate auth
Controller -> auth: getLoggedUser()
activate auth
auth --> Controller: user
deactivate auth
Controller -> staffS: canEditOperationRequest(operationRequestId, user)
activate staffS
staffS -> user: getUserEmail()
activate user
user --> staffS: userEmail
deactivate user

staffS -> Repositories: getStaffRepository()
activate Repositories
Repositories --> staffS: staffRepository
deactivate Repositories
staffS -> staffR: getStaffByEmail(userEmail)
activate staffR
staffR --> staffS: staff
deactivate staffR
staffS -> staff: getStaffEId()
activate staff
staff --> staffS: staffEId
deactivate staff
staffS -> operationRR: getOperationRequest(operationRequestId)
activate operationRR
operationRR --> staffS: operationRequest
deactivate operationRR
staffS -> operationR: getDoctorId()
activate operationR
operationR --> staffS: doctorId
deactivate operationR
alt if the doctorId is equal to the staffEId
staffS -> Controller: true
end
deactivate staffS
Controller --> UI: true
deactivate Controller
UI -> Doctor: asks which data he wants to change
deactivate UI
Doctor -> UI: sends the data to be changed
activate UI
UI -> Controller: editOperationRequest(operationRequestId,data)
activate Controller
Controller -> auth: ensureAuthenticatedUserHasAnyOf(role)
activate auth
auth --> Controller:  true
deactivate auth
Controller -> staffS: editOperationRequest(operationRequestId,data)
activate staffS
staffS -> operationRR: getOperationRequest(operationRequestId)
activate operationRR
operationRR --> staffS: operationRequest
deactivate operationRR
alt if the data contains the priority
staffS -> operationR: changePriority(priority)
activate operationR
operationR -> priority**: new Priority(priority)
activate priority
priority --> operationR 
deactivate priority
operationR --> staffS
deactivate operationR


else if the data contains the deadline
alt if the data contains the priority
staffS -> operationR: changeDeadline(deadline)
activate operationR
operationR -> deadline**: new Deadline(deadline)
activate deadline
deadline --> operationR 
deactivate deadline
operationR --> staffS
deactivate operationR

end 

staffS -> operationRR: update(operationRequest)
activate operationRR
operationRR --> staffS: updated
deactivate operationRR
staffS --> Controller: updated
deactivate staffS
Controller --> UI: updated
deactivate Controller
UI --> Doctor: updated












@enduml