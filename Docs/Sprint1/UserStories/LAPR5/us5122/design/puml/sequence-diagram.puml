@startuml
title Sequence Diagram Title
skinparam classAttributeIconSize 0

skinparam class {
    LifeLineBorderColor DodgerBlue
    LifeLineBackgroundColor APPLICATION
    BackgroundColor LemonChiffon
    ArrowColor Brown
    BorderColor SaddleBrown
}

skinparam packageStyle rectangle

skinparam card {
    LifeLineBorderColor DodgerBlue
    LifeLineBackgroundColor APPLICATION
    BackgroundColor LemonChiffon
    ArrowColor Brown
    BorderColor SaddleBrown
}

actor Admin
participant "DeactivateOrDeleteOperationTypeUI" as UI
participant "DeactivateOrDeleteOperationTypeController" as Controller
participant "ManageOperationTypeService" as operationS
participant "AuthService" as auth
participant "Repositories" as Repositories
participant "OperationTypeRepository" as operationTypeR
participant "OperationType" as operationType
participant "IsActive" as isActive

activate Admin
Admin -> UI: I want to deactivate or delete an operation type
activate UI
UI -> Admin: asks for which operation type he wants to deactivate or delete

deactivate UI
Admin -> UI: operationTypeId
activate UI
alt deactivate 
    UI -> Controller: deactivateOperationType(operationTypeId)
    activate Controller
    Controller -> auth: ensureAuthenticatedUserHasAnyOf(role)
    activate auth
    auth --> Controller:  true
    deactivate auth
    Controller -> operationS : deactivateOperationType(operationTypeId)
    activate operationS
    operationS -> Repositories : getOperationTypeRepository()
    activate Repositories
    Repositories --> operationS : operationTypeRepository
    deactivate Repositories
    operationS -> operationTypeR : getOperationType(operationTypeId)
    activate operationTypeR
    operationTypeR --> operationS : operationType
    deactivate operationTypeR
    operationS -> operationType : deactivate()
    activate operationType
    operationType -> isActive** : new isActive(false)
    operationType--> operationS
    deactivate operationType
    operationS -> operationTypeR : update(operationType)
    activate operationTypeR
    operationTypeR --> operationS : updated
    deactivate operationTypeR
    operationS --> Controller: updated
    deactivate operationS
    Controller --> UI: updated
    deactivate Controller
    UI --> Admin: updated
    deactivate UI

else    delete
    UI -> Controller: deleteOperationType(operationTypeId)
    activate Controller
    Controller -> auth: ensureAuthenticatedUserHasAnyOf(role)
    activate auth
    auth --> Controller:  true
    deactivate auth
    Controller -> operationS : deleteOperationType(operationTypeId)
    activate operationS
    operationS -> Repositories : getOperationTypeRepository()
    activate Repositories
    Repositories --> operationS : operationTypeRepository
    deactivate Repositories
    operationS -> operationTypeR : deleteOperationType(operationTypeId)
    activate operationTypeR
    operationTypeR --> operationS : deleted
    deactivate operationTypeR
    operationS --> Controller: deleted
    deactivate operationS
    Controller --> UI: deleted
    deactivate Controller
    UI --> Admin: deleted
    deactivate UI



end












@enduml