@startuml
title Sequence Diagram
skinparam classAttributeIconSize 0

skinparam class {
    LifeLineBorderColor DodgerBlue
    LifeLineBackgroundColor APPLICATION
    BackgroundColor LemonChiffon
    ArrowColor Brown
    BorderColor SaddleBrown
}

skinparam packageStyle rectangle

skinparam card {
    LifeLineBorderColor DodgerBlue
    LifeLineBackgroundColor APPLICATION
    BackgroundColor LemonChiffon
    ArrowColor Brown
    BorderColor SaddleBrown
}

actor Admin
participant "Route" as UI
participant "OperationTypeController" as Controller
participant "OperationTypeService" as operationS
participant "OperationTypeRepository" as operationTypeR
database "Data Base" as db 
participant "OperationType" as operationType

activate Admin

Admin-> UI: HttpPatch("/ChangeStatus/{id}")  
UI -> Controller : DeactivateOperationType(string id)
activate Controller 
Controller-> operationS : deactivateOperationTypeAsync(id)
activate operationS
operationS -> operationTypeR : GetByIdAsync(new OperationTypeName(id))
activate operationTypeR
operationTypeR -> db : get(id)
activate db
db --> operationTypeR: operationType
deactivate db
operationTypeR --> operationS : operationType
deactivate operationTypeR
operationS-> operationType : changeStatus()
activate operationType 
operationType -> operationType: status changed
operationType --> operationS
deactivate  operationType
operationS->operationTypeR: UpdateAsync(operationType)
activate operationTypeR
operationTypeR -> db : update(operationType)
db --> operationTypeR
deactivate db
operationTypeR --> operationS
deactivate operationTypeR
operationS -> Controller : true
deactivate operationS
Controller --> UI: true
deactivate Controller
UI --> Admin : true

deactivate Admin

















@enduml