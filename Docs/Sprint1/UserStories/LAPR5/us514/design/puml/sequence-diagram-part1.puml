@startuml
title Sequence Diagram PART 1
skinparam classAttributeIconSize 0

skinparam class {
    LifeLineBorderColor DodgerBlue
    LifeLineBackgroundColor APPLICATION
    BackgroundColor LemonChiffon
    ArrowColor Brown
    BorderColor SaddleBrown
}

skinparam packageStyle rectangle

skinparam card {
    LifeLineBorderColor DodgerBlue
    LifeLineBackgroundColor APPLICATION
    BackgroundColor LemonChiffon
    ArrowColor Brown
    BorderColor SaddleBrown
}

actor Patient
participant "ChangePatientDataUI" as UI
participant "ChangePatientDataController" as Controller
participant "ChangePatientDataService" as userS
participant "SensitiveDataService" as service
participant "PendingRequestsService" as serviceRequest
participant "NotificationService" as serviceNote
participant "AuthService" as auth
participant "Repositories" as Repositories
participant "PatientRepository" as patientR
participant "User" as USER
participant "Patient" as patient

participant "PatientDTO" as patientDTO


activate Patient
Patient -> UI: Request to change the user data
activate UI
UI -> Controller: canChangeUserData()
activate Controller
Controller -> auth: ensureAuthenticatedUserHasAnyOf(role)
activate auth
auth --> Controller:  true
deactivate auth

Controller -> auth: ensureAuthenticatedUserHasAnyOf(role)
activate auth
auth --> Controller:  true
deactivate auth
Controller -> userS : getPatientByUser()
activate userS
userS -> auth : getLoggedUser()
activate auth
auth --> userS : user
deactivate auth
userS -> USER : email()
activate USER
USER --> userS : email
deactivate USER
userS ->Repositories : getPatientRepository()
activate Repositories
Repositories -> userS : patientRepository
deactivate Repositories
userS -> patientR : findByEmail(email)
activate patientR
patientR --> userS : patient
deactivate patientR
userS -> patientDTO** : new PatientDTO(patient)
activate patientDTO
patientDTO --> userS : patientDTO
deactivate patientDTO
userS --> Controller : patientDTO
deactivate userS
Controller -> UI : patientDTO
deactivate Controller
UI --> Patient : Shows patientDTO and asks which \n  attributes he wants to change
deactivate UI
Patient -> UI : Request to change some data
activate UI
UI -> Controller : changePatientData(patientAttributes)
activate Controller
Controller -> userS : changePatientData(patientAttributes)
activate userS
loop For each attribute 
userS -> service : isSensitiveData(attributeName)
activate service
service --> userS : boolean
deactivate service
alt If is sensitive data
userS -> serviceRequest : createPendingRequest(user, attributeName, \n pendingValue, oldValue)
activate serviceRequest
serviceRequest --> userS : pendingRequest
deactivate serviceRequest
userS -> serviceNote : notifyPendingRequest(pendingRequest, patientEmail)
activate serviceNote
serviceNote --> userS : notified
deactivate serviceNote

else If it is not sensitive data
userS -> patientR : findByEmail(email)
activate patientR
patientR --> userS : patient
deactivate patientR
userS -> patient : changeAttribute(attributeName, newValue)~
activate patient
patient --> userS : patient
deactivate patient
userS -> patientR : save(patient)
activate patientR
patientR --> userS : saved
deactivate patientR
end
end
userS --> Controller : changed
deactivate userS
Controller --> UI : changed
deactivate Controller
UI --> Patient : changed



















@enduml