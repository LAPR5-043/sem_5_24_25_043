@startuml
title Sequence Diagram 
skinparam classAttributeIconSize 0

skinparam class {
    LifeLineBorderColor DodgerBlue
    LifeLineBackgroundColor APPLICATION
    BackgroundColor LemonChiffon
    ArrowColor Brown
    BorderColor SaddleBrown
}

skinparam packageStyle rectangle

skinparam card {
    LifeLineBorderColor DodgerBlue
    LifeLineBackgroundColor APPLICATION
    BackgroundColor LemonChiffon
    ArrowColor Brown
    BorderColor SaddleBrown
}

actor Admin
participant "Route" as UI
participant "PatientController" as Controller
participant "PatientService" as userS
participant "PatientRepository" as userR
participant "PendingRequestService" as penS
participant "PendingRequestRepository" as penR
participant "LogService" as LogS
participant "LogRepository" as LogR
participant "SensitiveDataService" as sensS
participant "EmailService" as emailS
participant "Patient" as user
participant "PatientDto" as userDto
database "DataBase" as db

activate Admin
Admin -> UI: HttpPut("personalData/{id}")
activate UI
UI -> Controller: DeletePatientAsync(id, adminEmail)
activate Controller
Controller -> userS : UpdatePatientAsync(id, patientDto)
activate userS
userS -> userR : GetByIdAsync(id)
activate userR 
userR -> db : getById(id)
activate db
db --> userR: patient
deactivate db
userR --> userS: patient
deactivate userR

loop for each patient attribute's
userS -> sensS: isSensitive(attributeValue)
sensS --> userS : bool
deactivate sensS



alt if is sensitive

userS -> userDto: getAttribute(X)
activate userDto
userDto --> userS: attribute
deactivate userDto
userS -> penS: AddPendingRequestAsync(patientId,oldValue, pendingValue, propertyName)
activate penS
penS -> penR : AddAsync(pendingRequest)
activate penR
penR -> db : add(pendingRequest)
activate db
db --> penR
deactivate db
penR --> penS 
deactivate penR
penS --> userS : pendingRequest
deactivate penS
else if it is not

userS -> userDto: getAttribute(X)
activate userDto
userDto --> userS: attribute
deactivate userDto
userS -> user : setAttribute(attribute)
activate user 
user --> userS 
deactivate user
userS --> LogR : CreateLogAsync(log, email)
activate LogR
LogR --> db : add(log)
activate db 
db --> LogR 
deactivate db
LogR --> LogS
deactivate LogR
LogS --> userS
deactivate LogS
end



end

userS -> emailS : SendEmailAsync(email, subject , message)
activate  emailS
emailS --> userS 
deactivate emailS 

userS -> userR: save(patient)
activate userR 
userR --> db : save(patient)
activate db 
db --> userR 
deactivate db
userR--> userS 
deactivate userR






userS --> Controller : true
deactivate userS 
Controller --> UI : true
deactivate Controller 
UI --> Admin : true
deactivate UI
deactivate Admin
















@enduml