{
	"info": {
		"_postman_id": "aea983c2-0de1-464c-82ba-042122f3abcd",
		"name": "E2E Operation Request",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39288960",
		"_collection_link": "https://medopt.postman.co/workspace/Medopt-Workspace~a66b371f-c241-4822-8fcf-a9bd369d8dcb/collection/39288960-aea983c2-0de1-464c-82ba-042122f3abcd?action=share&source=collection_link&creator=39288960"
	},
	"item": [
		{
			"name": "Login Doctor",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Check if accessToken has a value\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"accessToken\");\r",
							"    pm.expect(jsonData.accessToken).to.be.a(\"string\").and.not.empty;\r",
							"});\r",
							"const jsonData = pm.response.json();\r",
							"if (jsonData.accessToken) {\r",
							"    pm.environment.set(\"accessToken\", jsonData.accessToken);\r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "https://localhost:7258/api/User/login-user?email=rfns0303@gmail.com&password=teste123",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7258",
					"path": [
						"api",
						"User",
						"login-user"
					],
					"query": [
						{
							"key": "email",
							"value": "rfns0303@gmail.com"
						},
						{
							"key": "password",
							"value": "teste123"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create OperationRequest",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Set environment variables for the request\r",
							"pm.environment.set(\"requestId\", \"\"); // Leave empty as specified\r",
							"pm.environment.set(\"patientID\", \"123\");\r",
							"pm.environment.set(\"operationTypeID\", \"456\");\r",
							"pm.environment.set(\"doctorID\", \"D202400011\");\r",
							"pm.environment.set(\"priority\", \"Emergency\");\r",
							"pm.environment.set(\"day\", \"25\");\r",
							"pm.environment.set(\"month\", \"10\");\r",
							"pm.environment.set(\"year\", \"2024\");\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has correct message\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"message\", \"Operation Request created successfully.\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"requestId\": \"{{requestId}}\",\r\n  \"patientID\": \"{{patientID}}\",\r\n  \"operationTypeID\": \"{{operationTypeID}}\",\r\n  \"doctorID\": \"{{doctorID}}\",\r\n  \"priority\": \"{{priority}}\",\r\n  \"day\": \"{{day}}\",\r\n  \"month\": \"{{month}}\",\r\n  \"year\": \"{{year}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:7258/api/OperationRequest/Create",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7258",
					"path": [
						"api",
						"OperationRequest",
						"Create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get OperationRequest",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Check that the status code is 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Parse the response JSON\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"// Verify that \"value\" array exists, is not empty, and contains expected data\r",
							"pm.test(\"Response contains operation request data\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"value\").that.is.an(\"array\").with.lengthOf(1);\r",
							"\r",
							"    const operationData = jsonData.value[0];\r",
							"\r",
							"    // Retrieve variables and check against the response\r",
							"    pm.expect(operationData).to.have.property(\"patientID\", pm.environment.get(\"patientID\"));\r",
							"    pm.expect(operationData).to.have.property(\"operationTypeID\", pm.environment.get(\"operationTypeID\"));\r",
							"    pm.expect(operationData).to.have.property(\"doctorID\", pm.environment.get(\"doctorID\"));\r",
							"    pm.expect(operationData).to.have.property(\"priority\", pm.environment.get(\"priority\"));\r",
							"    pm.expect(operationData).to.have.property(\"day\", pm.environment.get(\"day\"));\r",
							"    pm.expect(operationData).to.have.property(\"month\", pm.environment.get(\"month\"));\r",
							"    pm.expect(operationData).to.have.property(\"year\", pm.environment.get(\"year\"));\r",
							"\r",
							"    // Save the requestId to an environment variable\r",
							"    pm.environment.set(\"requestId\", operationData.requestId);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost:7258/api/OperationRequest/doctor/submitted?Patient%20ID={{patientID}}&Operation%20Type={{operationTypeID}}&priority={{priority}}",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7258",
					"path": [
						"api",
						"OperationRequest",
						"doctor",
						"submitted"
					],
					"query": [
						{
							"key": "Patient%20ID",
							"value": "{{patientID}}"
						},
						{
							"key": "Operation%20Type",
							"value": "{{operationTypeID}}"
						},
						{
							"key": "priority",
							"value": "{{priority}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Operation Request",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Set environment variables for the request\r",
							"pm.environment.set(\"day\", \"10\");\r",
							"pm.environment.set(\"month\", \"10\");\r",
							"pm.environment.set(\"year\", \"2020\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Check that the status code is 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Parse the response JSON\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"// Verify the success message\r",
							"pm.test(\"Message indicates successful update\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"message\", \"Operation request updated successfully.\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"day\": \"{{day}}\",\r\n  \"month\": \"{{month}}\",\r\n  \"year\": \"{{year}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:7258/api/OperationRequest/{{requestId}}",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7258",
					"path": [
						"api",
						"OperationRequest",
						"{{requestId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Update Check Alterations",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Check that the status code is 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Parse the response JSON\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"// Verify that \"value\" array exists, is not empty, and contains expected data\r",
							"pm.test(\"Response contains operation request data\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"value\").that.is.an(\"array\").with.lengthOf(1);\r",
							"\r",
							"    const operationData = jsonData.value[0];\r",
							"\r",
							"    // Retrieve variables and check against the response\r",
							"    pm.expect(operationData).to.have.property(\"patientID\", pm.environment.get(\"patientID\"));\r",
							"    pm.expect(operationData).to.have.property(\"operationTypeID\", pm.environment.get(\"operationTypeID\"));\r",
							"    pm.expect(operationData).to.have.property(\"doctorID\", pm.environment.get(\"doctorID\"));\r",
							"    pm.expect(operationData).to.have.property(\"priority\", pm.environment.get(\"priority\"));\r",
							"    pm.expect(operationData).to.have.property(\"day\", pm.environment.get(\"day\"));\r",
							"    pm.expect(operationData).to.have.property(\"month\", pm.environment.get(\"month\"));\r",
							"    pm.expect(operationData).to.have.property(\"year\", pm.environment.get(\"year\"));\r",
							"\r",
							"    // Save the requestId to an environment variable\r",
							"    pm.environment.set(\"requestId\", operationData.requestId);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost:7258/api/OperationRequest/doctor/submitted?Patient%20ID={{patientID}}&Operation%20Type={{operationTypeID}}&priority={{priority}}",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7258",
					"path": [
						"api",
						"OperationRequest",
						"doctor",
						"submitted"
					],
					"query": [
						{
							"key": "Patient%20ID",
							"value": "{{patientID}}"
						},
						{
							"key": "Operation%20Type",
							"value": "{{operationTypeID}}"
						},
						{
							"key": "priority",
							"value": "{{priority}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Remove Operation Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Check that the status code is 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Parse the response JSON\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"// Verify the success message\r",
							"pm.test(\"Message indicates successful deletion\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"message\", \"Operation request deleted successfully.\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "X-Confirm-Delete",
						"value": "true",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://localhost:7258/api/OperationRequest/{{requestId}}",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7258",
					"path": [
						"api",
						"OperationRequest",
						"{{requestId}}"
					]
				}
			},
			"response": []
		}
	]
}