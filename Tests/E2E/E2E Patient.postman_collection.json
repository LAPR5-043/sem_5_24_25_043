{
	"info": {
		"_postman_id": "bfce8769-d7d6-4e43-b083-4444a1750250",
		"name": "E2E Patient",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39288960",
		"_collection_link": "https://medopt.postman.co/workspace/Medopt-Workspace~a66b371f-c241-4822-8fcf-a9bd369d8dcb/collection/39288960-bfce8769-d7d6-4e43-b083-4444a1750250?action=share&source=collection_link&creator=39288960"
	},
	"item": [
		{
			"name": "Login Admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test to check if the response status code is 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test to check if the accessToken has a value\r",
							"pm.test(\"Check if accessToken has a value\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"accessToken\");\r",
							"    pm.expect(jsonData.accessToken).to.be.a(\"string\").and.not.empty;\r",
							"});\r",
							"\r",
							"// Save the accessToken to the environment variable\r",
							"const jsonData = pm.response.json();\r",
							"if (jsonData.accessToken) {\r",
							"    pm.environment.set(\"accessToken\", jsonData.accessToken);\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "https://localhost:7258/api/User/login-user?email=tiago.abreu.mail2%40gmail.com&password=tiagoabreu22",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7258",
					"path": [
						"api",
						"User",
						"login-user"
					],
					"query": [
						{
							"key": "email",
							"value": "tiago.abreu.mail2%40gmail.com"
						},
						{
							"key": "password",
							"value": "tiagoabreu22"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Patient",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Parse the response JSON\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"// Check that the status code is 201\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"// Verify that the fields match the expected environment variables in a single test\r",
							"pm.test(\"All attributes match the environment variables\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"firstName\", pm.environment.get(\"firstName\"));\r",
							"    pm.expect(jsonData).to.have.property(\"lastName\", pm.environment.get(\"lastName\"));\r",
							"    pm.expect(jsonData).to.have.property(\"email\", pm.environment.get(\"patientEmail\"));\r",
							"    pm.expect(jsonData).to.have.property(\"phoneNumber\", pm.environment.get(\"phoneNumber\"));\r",
							"    pm.expect(jsonData).to.have.property(\"emergencyContactName\", pm.environment.get(\"emergencyContactName\"));\r",
							"    pm.expect(jsonData).to.have.property(\"emergencyContactPhoneNumber\", pm.environment.get(\"emergencyContactPhoneNumber\"));\r",
							"    pm.expect(jsonData).to.have.property(\"dayOfBirth\", pm.environment.get(\"dayOfBirth\"));\r",
							"    pm.expect(jsonData).to.have.property(\"monthOfBirth\", pm.environment.get(\"monthOfBirth\"));\r",
							"    pm.expect(jsonData).to.have.property(\"yearOfBirth\", pm.environment.get(\"yearOfBirth\"));\r",
							"    pm.expect(jsonData).to.have.property(\"gender\", pm.environment.get(\"gender\"));\r",
							"});\r",
							"\r",
							"// Set the medicalRecordNumber to the new value in the environment\r",
							"pm.environment.set(\"medicalRecordNumber\", jsonData.medicalRecordNumber);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Set variables for patient details\r",
							"pm.environment.set(\"medicalRecordNumber\", \"\"); // Leave empty as specified\r",
							"pm.environment.set(\"firstName\", \"Diogo\");\r",
							"pm.environment.set(\"lastName\", \"Campos\");\r",
							"pm.environment.set(\"patientEmail\", \"1220601@isep.ipp.pt\");\r",
							"pm.environment.set(\"phoneNumber\", \"+351919919100\");\r",
							"pm.environment.set(\"emergencyContactName\", \"Mãe\");\r",
							"pm.environment.set(\"emergencyContactPhoneNumber\", \"+351919919184\");\r",
							"pm.environment.set(\"dayOfBirth\", \"1\");\r",
							"pm.environment.set(\"monthOfBirth\", \"1\");\r",
							"pm.environment.set(\"yearOfBirth\", \"1990\");\r",
							"pm.environment.set(\"gender\", \"Male\");\r",
							"\r",
							"// Initialize empty arrays for allergies and appointment history\r",
							"pm.environment.set(\"allergiesAndConditions\", JSON.stringify([\"\"]));\r",
							"pm.environment.set(\"appointmentHistory\", JSON.stringify([\"\"]));\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"medicalRecordNumber\": \"{{medicalRecordNumber}}\",\r\n  \"firstName\": \"{{firstName}}\",\r\n  \"lastName\": \"{{lastName}}\",\r\n  \"email\": \"{{patientEmail}}\",\r\n  \"phoneNumber\": \"{{phoneNumber}}\",\r\n  \"emergencyContactName\": \"{{emergencyContactName}}\",\r\n  \"emergencyContactPhoneNumber\": \"{{emergencyContactPhoneNumber}}\",\r\n  \"dayOfBirth\": \"{{dayOfBirth}}\",\r\n  \"monthOfBirth\": \"{{monthOfBirth}}\",\r\n  \"yearOfBirth\": \"{{yearOfBirth}}\",\r\n  \"gender\": \"{{gender}}\",\r\n  \"allergiesAndConditions\": {{allergiesAndConditions}},\r\n  \"appointmentHistory\": {{appointmentHistory}}\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:7258/api/Patient/Create",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7258",
					"path": [
						"api",
						"Patient",
						"Create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Filtered / Check Created",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Parse the response JSON\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"// Check that the status code is 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Verify that the fields in the first object of the \"value\" array match the expected environment variables\r",
							"pm.test(\"Response contains patient data\", function () {\r",
							"    const patient = jsonData.value[0]; // Get the first object from the value array\r",
							"\r",
							"    pm.expect(patient).to.have.property(\"medicalRecordNumber\", pm.environment.get(\"medicalRecordNumber\"));\r",
							"    pm.expect(patient).to.have.property(\"firstName\", pm.environment.get(\"firstName\"));\r",
							"    pm.expect(patient).to.have.property(\"lastName\", pm.environment.get(\"lastName\"));\r",
							"    pm.expect(patient).to.have.property(\"email\", pm.environment.get(\"patientEmail\"));\r",
							"    pm.expect(patient).to.have.property(\"phoneNumber\", pm.environment.get(\"phoneNumber\"));\r",
							"   // pm.expect(patient).to.have.property(\"emergencyContactName\", pm.environment.get(\"emergencyContactName\"));\r",
							"    //pm.expect(patient).to.have.property(\"emergencyContactPhoneNumber\", pm.environment.get(\"emergencyContactPhoneNumber\"));\r",
							"    pm.expect(patient).to.have.property(\"dayOfBirth\", pm.environment.get(\"dayOfBirth\"));\r",
							"    pm.expect(patient).to.have.property(\"monthOfBirth\", pm.environment.get(\"monthOfBirth\"));\r",
							"    pm.expect(patient).to.have.property(\"yearOfBirth\", pm.environment.get(\"yearOfBirth\"));\r",
							"    pm.expect(patient).to.have.property(\"gender\", pm.environment.get(\"gender\"));\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost:7258/api/Patient/filtered?email={{patientEmail}}&medicalRecordNumber={{medicalRecordNumber}}",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7258",
					"path": [
						"api",
						"Patient",
						"filtered"
					],
					"query": [
						{
							"key": "email",
							"value": "{{patientEmail}}"
						},
						{
							"key": "medicalRecordNumber",
							"value": "{{medicalRecordNumber}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit Existing Patient",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Set variables for patient details\r",
							"pm.environment.set(\"firstName\", \"John\");\r",
							"pm.environment.set(\"lastName\", \"Máquina\");\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Check that the status code is 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Parse the response JSON\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"// Verify the success message\r",
							"pm.test(\"Success message is correct\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"message\", \"Patient updated successfully.\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"firstName\": \"{{firstName}}\",\r\n  \"lastName\": \"{{lastName}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:7258/api/Patient/edit/{{medicalRecordNumber}}",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7258",
					"path": [
						"api",
						"Patient",
						"edit",
						"{{medicalRecordNumber}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Update Check Alterations",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Parse the response JSON\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"// Check that the status code is 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Verify that the fields in the first object of the \"value\" array match the expected environment variables\r",
							"pm.test(\"Response contains patient data\", function () {\r",
							"    const patient = jsonData.value[0]; // Get the first object from the value array\r",
							"\r",
							"    pm.expect(patient).to.have.property(\"medicalRecordNumber\", pm.environment.get(\"medicalRecordNumber\"));\r",
							"    pm.expect(patient).to.have.property(\"firstName\", pm.environment.get(\"firstName\"));\r",
							"    pm.expect(patient).to.have.property(\"lastName\", pm.environment.get(\"lastName\"));\r",
							"    pm.expect(patient).to.have.property(\"email\", pm.environment.get(\"patientEmail\"));\r",
							"    pm.expect(patient).to.have.property(\"phoneNumber\", pm.environment.get(\"phoneNumber\"));\r",
							"    //pm.expect(patient).to.have.property(\"emergencyContactName\", pm.environment.get(\"emergencyContactName\"));\r",
							"    //pm.expect(patient).to.have.property(\"emergencyContactPhoneNumber\", pm.environment.get(\"emergencyContactPhoneNumber\"));\r",
							"    pm.expect(patient).to.have.property(\"dayOfBirth\", pm.environment.get(\"dayOfBirth\"));\r",
							"    pm.expect(patient).to.have.property(\"monthOfBirth\", pm.environment.get(\"monthOfBirth\"));\r",
							"    pm.expect(patient).to.have.property(\"yearOfBirth\", pm.environment.get(\"yearOfBirth\"));\r",
							"    pm.expect(patient).to.have.property(\"gender\", pm.environment.get(\"gender\"));\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost:7258/api/Patient/filtered?email={{patientEmail}}&medicalRecordNumber={{medicalRecordNumber}}",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7258",
					"path": [
						"api",
						"Patient",
						"filtered"
					],
					"query": [
						{
							"key": "email",
							"value": "{{patientEmail}}"
						},
						{
							"key": "medicalRecordNumber",
							"value": "{{medicalRecordNumber}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Patient",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Check that the status code is 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Parse the response JSON\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"// Verify the success message\r",
							"pm.test(\"Success message is correct\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"message\", \"Patient deleted successfully.\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://localhost:7258/api/Patient/{{medicalRecordNumber}}",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7258",
					"path": [
						"api",
						"Patient",
						"{{medicalRecordNumber}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Check Delete Successfull",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Parse the response JSON\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"// Check that the status code is 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Verify that \"result\" is null\r",
							"pm.test('\"result\" is null', function () {\r",
							"    pm.expect(jsonData.result).to.be.null;\r",
							"});\r",
							"\r",
							"// Verify that the \"value\" array is empty\r",
							"pm.test('\"value\" array is empty', function () {\r",
							"    pm.expect(jsonData.value).to.be.an(\"array\").that.is.empty;\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost:7258/api/Patient/filtered?email={{patientEmail}}&medicalRecordNumber={{medicalRecordNumber}}",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7258",
					"path": [
						"api",
						"Patient",
						"filtered"
					],
					"query": [
						{
							"key": "email",
							"value": "{{patientEmail}}"
						},
						{
							"key": "medicalRecordNumber",
							"value": "{{medicalRecordNumber}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "accessToken",
			"value": "",
			"type": "default"
		},
		{
			"key": "medicalRecordNumber",
			"value": "",
			"type": "default"
		},
		{
			"key": "patientEmail",
			"value": "",
			"type": "default"
		}
	]
}